#!/bin/bash
# Лабораторная работа №3 - Установка программного обеспечения
# Адаптировано для Arch Linux (для APT‑команд и dpkg‑утилит – для демонстрации на Debian-системе)

# -----------------------------------------------------------------------------------
# 1. Вывести список всех подключенных репозитариев
echo "Список репозитариев (из /etc/pacman.conf):"
grep -E '^\[.*\]' /etc/pacman.conf
echo

# -----------------------------------------------------------------------------------
# 2. Обновление локальных индексов пакетов
echo "Обновление локальных индексов пакетов:"
sudo pacman -Syy
echo

# -----------------------------------------------------------------------------------
# 3. Вывести информацию о метапакете build-essential
# В Arch Linux аналогом является группа пакетов base-devel.
echo "Информация о группе base-devel (аналог build-essential):"
pacman -Si base-devel
echo

# -----------------------------------------------------------------------------------
# 4. Установить метапакет build-essential (установить группу base-devel)
echo "Установка группы base-devel:"
sudo pacman -S --needed base-devel
echo

# -----------------------------------------------------------------------------------
# 5. Найти пакет с описанием, содержащим строку "clone with a bastard algorithm"
# На Arch Linux поиск в официальных репозиториях по данному описанию, скорее всего, не даст результата.
# Попробуем выполнить поиск:
echo "Поиск пакета с описанием 'clone with a bastard algorithm':"
pacman -Ss "clone with a bastard algorithm"
echo "Такого пакета не найдено. В качестве демонстрации выберем пакет git."
echo "Информация о пакете git:"
pacman -Si git
echo

# -----------------------------------------------------------------------------------
# 6. Скачивание исходных кодов выбранного пакета (используем git в качестве примера)
# Arch Linux предоставляет инструмент asp для экспорта PKGBUILD и исходных файлов.
echo "Установка инструмента asp (если не установлен) и экспорт исходников пакета git:"
sudo pacman -S --needed asp
mkdir -p ~/git_src && cd ~/git_src
asp export git
echo "Исходные файлы пакета git сохранены в каталоге ~/git_src/git"
echo

# -----------------------------------------------------------------------------------
# 7. Сборка и установка пакета из исходных кодов
# Переходим в каталог с исходниками (пример – пакет git)
cd ~/git_src/git
# Стандартные этапы сборки (на реальном примере для git может потребоваться иная последовательность)
echo "Запуск ./configure, make и установки (sudo make install):"
./configure
make
sudo make install
echo

# -----------------------------------------------------------------------------------
# 8. Если в конфигурационном файле пакета нет параметров установки в нужное место,
#    внести их так, чтобы пакет устанавливался в /usr/local/bin с правами 755.
# Пример: заменяем значение переменной PREFIX в Makefile.
echo "Изменение пути установки (замена PREFIX на /usr/local) в Makefile:"
sudo sed -i 's|^PREFIX *=.*|PREFIX = /usr/local|' Makefile
echo "Пересборка и повторная установка:"
sudo make install
# Если бинарный файл уже установлен, задаем права:
sudo chmod 755 /usr/local/bin/git
echo

# -----------------------------------------------------------------------------------
# 9. Проверка: любой пользователь может запускать установленный пакет
echo "Проверка запуска пакета git от имени пользователя nobody:"
sudo -u nobody /usr/local/bin/git --version
echo

# -----------------------------------------------------------------------------------
# 10. Создание файла task10.log со списком всех установленных пакетов
echo "Создание файла task10.log (список всех установленных пакетов):"
pacman -Q > ~/task10.log
echo "См. файл ~/task10.log"
echo

# -----------------------------------------------------------------------------------
# 11. Создание файла task11.log со списком зависимостей компилятора gcc
echo "Построение дерева зависимостей для gcc и сохранение в task11.log:"
pactree gcc > ~/task11.log
echo "См. файл ~/task11.log"
echo

# -----------------------------------------------------------------------------------
# 12. Создание файла task12.log со списком пакетов, установка которых требует установленного пакета libgpm
# В Arch Linux пакет называется libgpm.
echo "Получение информации о зависимостях (Required By) для libgpm и сохранение в task12.log:"
pacman -Qi libgpm | grep 'Required By' > ~/task12.log
echo "См. файл ~/task12.log"
echo

# -----------------------------------------------------------------------------------
# 13. Создание каталога localrepo в домашнем каталоге root и скачивание 5 разных версий пакета htop
echo "Создание каталога /root/localrepo и скачивание 5 версий пакета htop с snapshot.debian.org"
sudo mkdir -p /root/localrepo
cd /root/localrepo
# Пример скачивания (URL – для демонстрации; замените на актуальные ссылки при необходимости)
sudo wget -O htop_1.deb http://snapshot.debian.org/archive/htop/htop_1.deb
sudo wget -O htop_2.deb http://snapshot.debian.org/archive/htop/htop_2.deb
sudo wget -O htop_3.deb http://snapshot.debian.org/archive/htop/htop_3.deb
sudo wget -O htop_4.deb http://snapshot.debian.org/archive/htop/htop_4.deb
sudo wget -O htop_5.deb http://snapshot.debian.org/archive/htop/htop_5.deb
echo "Скачанные файлы находятся в /root/localrepo"
echo

# -----------------------------------------------------------------------------------
# 14. Генерация файлов Packages и Release для локального APT-репозитория
# Для этого требуется утилита dpkg-scanpackages, которая входит в пакет dpkg-dev (можно установить из AUR).
# Если dpkg-scanpackages установлен, выполните:
cd /root/localrepo
dpkg-scanpackages . /dev/null | gzip -9c > Packages.gz
echo "Создание файла Release с описанием репозитория:"
cat <<EOF | sudo tee Release
Origin: My Local Repo
Label: My Local Repo
Suite: stable
Version: 1.0
Codename: myrepo
Architectures: amd64
Components: main
Description: My local APT repository
EOF
echo

# -----------------------------------------------------------------------------------
# 15. Обновление кэша APT
# На системах с APT это делается командой:
echo "На системах с APT выполните: sudo apt-get update"
echo

# -----------------------------------------------------------------------------------
# 16. Вывести список подключенных репозитариев и краткую информацию о них
# На Debian можно использовать apt-cache policy, а здесь для Arch выводим репозитории из /etc/pacman.conf:
echo "Подключенные репозитории (из /etc/pacman.conf):"
grep -E '^\[.*\]' /etc/pacman.conf
echo

# -----------------------------------------------------------------------------------
# 17. Создание файла task16.log со списком всех доступных версий htop
# На Debian (с APT) можно выполнить:
echo "На системах с APT выполните: apt-cache madison htop > ~/task16.log"
echo

# -----------------------------------------------------------------------------------
# 18. Установка предпоследней версии пакета htop
# Для выбора конкретной версии в Debian используйте:
echo "На системах с APT выполните: sudo apt-get install htop=<предпоследняя_версия>"
echo "Список доступных версий можно узнать из файла task16.log"
echo

# -----------------------------------------------------------------------------------
# 19. Скачивание пакета nano из сетевого репозитория и пересборка с переименованием команды
echo "Скачивание пакета nano и пересборка для установки команды newnano:"
mkdir -p ~/nano_work && cd ~/nano_work
# Скачивание исходного .deb пакета nano (на Debian можно использовать apt-get download)
apt-get download nano
# Распаковка пакета
dpkg-deb -R nano_*.deb nano_unpacked
# Внесите изменения в конфигурационные файлы (например, можно добавить в postinst создание символической ссылки)
echo 'ln -sf /usr/bin/nano /usr/local/bin/newnano' >> nano_unpacked/DEBIAN/postinst
chmod 755 nano_unpacked/DEBIAN/postinst
# Пересборка пакета
dpkg-deb -b nano_unpacked newnano.deb
# Установка нового пакета
sudo dpkg -i newnano.deb
echo "После установки, команда newnano должна запускать редактор nano."
echo

# -----------------------------------------------------------------------------------
# 20. Бонусный вопрос: Что есть в APT?
echo "Бонусный вопрос:"
echo "APT (Advanced Package Tool) — это набор инструментов для управления пакетами в системах на базе Debian, объединяющий функции apt-get, apt-cache и других утилит."
